package ru.javamentor.init.product;

import org.springframework.stereotype.Component;
import ru.javamentor.model.product.Product;
import ru.javamentor.model.product.Supplier;
import ru.javamentor.repository.product.ManufacturerRepository;
import ru.javamentor.repository.product.ProductCategoryRepository;
import ru.javamentor.repository.product.ProductRepository;
import ru.javamentor.repository.product.SupplierRepository;
import ru.javamentor.repository.product.UnitRepository;

import java.math.BigDecimal;
import java.util.Set;

@Component
public class InitProductService {
    public InitProductService(ManufacturerRepository manufacturerRepository, SupplierRepository supplierRepository, ProductCategoryRepository productCategoryRepository, UnitRepository unitRepository, ProductRepository productRepository) {
        this.manufacturerRepository = manufacturerRepository;
        this.supplierRepository = supplierRepository;
        this.productCategoryRepository = productCategoryRepository;
        this.unitRepository = unitRepository;
        this.productRepository = productRepository;
    }

    private final ManufacturerRepository manufacturerRepository;
    private final SupplierRepository supplierRepository;
    private final ProductCategoryRepository productCategoryRepository;
    private final UnitRepository unitRepository;
    private final ProductRepository productRepository;

    public void initProduct() {
        Product product = new Product();
        product.setProductCount(150);
        product.setProductName("Кофе молотый Жокей Ирландские сливки");
        product.setMadeCountry("RUSSIA");
        product.setManufacturer(manufacturerRepository.findManufacturerById(1L));
        Set<Supplier> suppliers = Set.copyOf(supplierRepository.findAll());
        product.setSuppliers(suppliers);
        product.setUnit(unitRepository.findUnitById(2L));
        product.setProductCategory(productCategoryRepository.findById(2L).get());
        product.setArticle("07938889");
        product.setMinMargin(BigDecimal.valueOf(10.00));
        product.setPrice(BigDecimal.valueOf(110.00));
        product.setStandardMargin(BigDecimal.valueOf(18.00));
        product.setPackagingCount(3);
        product.setIdFromErp("1000000");
        productRepository.save(product);

        Product product2 = new Product();
        product2.setProductCount(889);
        product2.setProductName("Кофе капсульный Nescafe Dolce Gusto Капучино,");
        product2.setMadeCountry("RUSSIA");
        product2.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers2 = Set.copyOf(supplierRepository.findAll());
        product2.setSuppliers(suppliers2);
        product2.setUnit(unitRepository.findUnitById(2L));
        product2.setProductCategory(productCategoryRepository.findById(2L).get());
        product2.setArticle("29048329");
        product2.setMinMargin(BigDecimal.valueOf(10.00));
        product2.setPrice(BigDecimal.valueOf(500.00));
        product2.setStandardMargin(BigDecimal.valueOf(18.00));
        product2.setPackagingCount(4);
        product2.setIdFromErp("1000001");
        productRepository.save(product2);

        Product product3 = new Product();
        product3.setProductCount(578);
        product3.setProductName("Кофе растворимый Nescafe Gold");
        product3.setMadeCountry("RUSSIA");
        product3.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers3 = Set.copyOf(supplierRepository.findAll());
        product3.setSuppliers(suppliers3);
        product3.setUnit(unitRepository.findUnitById(2L));
        product3.setProductCategory(productCategoryRepository.findById(2L).get());
        product3.setArticle("13767000");
        product3.setMinMargin(BigDecimal.valueOf(10.00));
        product3.setPrice(BigDecimal.valueOf(300.00));
        product3.setStandardMargin(BigDecimal.valueOf(18.00));
        product3.setPackagingCount(4);
        product3.setIdFromErp("1000002");
        productRepository.save(product3);

        Product product4 = new Product();
        product4.setProductCount(129);
        product4.setProductName("Чай в пакетиках Greenfield Spicy Mango, зеленый, со вкусом и ароматом манго");
        product4.setMadeCountry("RUSSIA");
        product4.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers4 = Set.copyOf(supplierRepository.findAll());
        product4.setSuppliers(suppliers4);
        product4.setUnit(unitRepository.findUnitById(2L));
        product4.setProductCategory(productCategoryRepository.findById(3L).get());
        product4.setArticle("55321780");
        product4.setMinMargin(BigDecimal.valueOf(10.00));
        product4.setPrice(BigDecimal.valueOf(110));
        product4.setStandardMargin(BigDecimal.valueOf(18.00));
        product4.setPackagingCount(4);
        product4.setIdFromErp("1000003");
        productRepository.save(product4);

        Product product5 = new Product();
        product5.setProductCount(329);
        product5.setProductName("Чай в пирамидках Greenfield Ice Cream Коллекция листового чая");
        product5.setMadeCountry("RUSSIA");
        product5.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers5 = Set.copyOf(supplierRepository.findAll());
        product5.setSuppliers(suppliers5);
        product5.setUnit(unitRepository.findUnitById(2L));
        product5.setProductCategory(productCategoryRepository.findById(3L).get());
        product5.setArticle("26143415");
        product5.setMinMargin(BigDecimal.valueOf(10.00));
        product5.setPrice(BigDecimal.valueOf(110));
        product5.setStandardMargin(BigDecimal.valueOf(18.00));
        product5.setPackagingCount(4);
        product5.setIdFromErp("1000004");
        productRepository.save(product5);

        Product product6 = new Product();
        product6.setProductCount(55);
        product6.setProductName("Tess Pina Colada ароматизированный чай в пакетиках");
        product6.setMadeCountry("RUSSIA");
        product6.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers6 = Set.copyOf(supplierRepository.findAll());
        product6.setSuppliers(suppliers6);
        product6.setUnit(unitRepository.findUnitById(2L));
        product6.setProductCategory(productCategoryRepository.findById(3L).get());
        product6.setArticle("58450655");
        product6.setMinMargin(BigDecimal.valueOf(10.00));
        product6.setPrice(BigDecimal.valueOf(11));
        product6.setStandardMargin(BigDecimal.valueOf(18.00));
        product6.setPackagingCount(4);
        product6.setIdFromErp("1000005");
        productRepository.save(product6);

        Product product7 = new Product();
        product7.setProductCount(650);
        product7.setProductName("Горячий шоколад какао 1 кг");
        product7.setMadeCountry("RUSSIA");
        product7.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers7 = Set.copyOf(supplierRepository.findAll());
        product7.setSuppliers(suppliers7);
        product7.setUnit(unitRepository.findUnitById(1L));
        product7.setProductCategory(productCategoryRepository.findById(4L).get());
        product7.setArticle("46953749");
        product7.setMinMargin(BigDecimal.valueOf(10.00));
        product7.setPrice(BigDecimal.valueOf(410));
        product7.setStandardMargin(BigDecimal.valueOf(18.00));
        product7.setPackagingCount(4);
        product7.setIdFromErp("1000006");
        productRepository.save(product7);

        Product product8 = new Product();
        product8.setProductCount(339);
        product8.setProductName("Nesquik Opti-Start какао-напиток растворимый");
        product8.setMadeCountry("RUSSIA");
        product8.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers8 = Set.copyOf(supplierRepository.findAll());
        product8.setSuppliers(suppliers8);
        product8.setUnit(unitRepository.findUnitById(1L));
        product8.setProductCategory(productCategoryRepository.findById(4L).get());
        product8.setArticle("97405346");
        product8.setMinMargin(BigDecimal.valueOf(10.00));
        product8.setPrice(BigDecimal.valueOf(310));
        product8.setStandardMargin(BigDecimal.valueOf(18.00));
        product8.setPackagingCount(4);
        product8.setIdFromErp("1000007");
        productRepository.save(product8);

        Product product9 = new Product();
        product9.setProductCount(289);
        product9.setProductName("Elza Hot Chocolate шоколад горячий, 325 г");
        product9.setMadeCountry("RUSSIA");
        product9.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers9 = Set.copyOf(supplierRepository.findAll());
        product9.setSuppliers(suppliers9);
        product9.setUnit(unitRepository.findUnitById(1L));
        product9.setProductCategory(productCategoryRepository.findById(4L).get());
        product9.setArticle("91316521");
        product9.setMinMargin(BigDecimal.valueOf(10.00));
        product9.setPrice(BigDecimal.valueOf(215));
        product9.setStandardMargin(BigDecimal.valueOf(18.00));
        product9.setPackagingCount(4);
        product9.setIdFromErp("1000008");
        productRepository.save(product9);

        Product product10 = new Product();
        product10.setProductCount(391);
        product10.setProductName("Растворимое какао Carraro Cacao Amaro 250 гр");
        product10.setMadeCountry("RUSSIA");
        product10.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers10 = Set.copyOf(supplierRepository.findAll());
        product10.setSuppliers(suppliers10);
        product10.setUnit(unitRepository.findUnitById(1L));
        product10.setProductCategory(productCategoryRepository.findById(4L).get());
        product10.setArticle("36352160");
        product10.setMinMargin(BigDecimal.valueOf(10.00));
        product10.setPrice(BigDecimal.valueOf(215));
        product10.setStandardMargin(BigDecimal.valueOf(18.00));
        product10.setPackagingCount(4);
        product10.setIdFromErp("1000009");
        productRepository.save(product10);

        Product product11 = new Product();
        product11.setProductCount(32);
        product11.setProductName("Слойка Мастер пирогов \"Венский конвертик\" с вишней, 70 г");
        product11.setMadeCountry("RUSSIA");
        product11.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers11 = Set.copyOf(supplierRepository.findAll());
        product11.setSuppliers(suppliers11);
        product11.setUnit(unitRepository.findUnitById(2L));
        product11.setProductCategory(productCategoryRepository.findById(6L).get());
        product11.setArticle("40746690");
        product11.setMinMargin(BigDecimal.valueOf(10.00));
        product11.setPrice(BigDecimal.valueOf(15));
        product11.setStandardMargin(BigDecimal.valueOf(18.00));
        product11.setPackagingCount(4);
        product11.setIdFromErp("1000010");
        productRepository.save(product11);

        Product product12 = new Product();
        product12.setProductCount(116);
        product12.setProductName("Кекс С.Пудовъ \"Баунти кокосовый с шоколадом\"");
        product12.setMadeCountry("RUSSIA");
        product12.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers12 = Set.copyOf(supplierRepository.findAll());
        product12.setSuppliers(suppliers12);
        product12.setUnit(unitRepository.findUnitById(2L));
        product12.setProductCategory(productCategoryRepository.findById(6L).get());
        product12.setArticle("06346131");
        product12.setMinMargin(BigDecimal.valueOf(10.00));
        product12.setPrice(BigDecimal.valueOf(115));
        product12.setStandardMargin(BigDecimal.valueOf(18.00));
        product12.setPackagingCount(4);
        product12.setIdFromErp("1000011");
        productRepository.save(product12);

        Product product13 = new Product();
        product13.setProductCount(350);
        product13.setProductName("Пирог Тирольские Пироги Клубника");
        product13.setMadeCountry("RUSSIA");
        product13.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers13 = Set.copyOf(supplierRepository.findAll());
        product13.setSuppliers(suppliers13);
        product13.setUnit(unitRepository.findUnitById(2L));
        product13.setProductCategory(productCategoryRepository.findById(6L).get());
        product13.setArticle("60711117");
        product13.setMinMargin(BigDecimal.valueOf(10.00));
        product13.setPrice(BigDecimal.valueOf(300.00));
        product13.setStandardMargin(BigDecimal.valueOf(18.00));
        product13.setPackagingCount(4);
        product13.setIdFromErp("1000012");
        productRepository.save(product13);

        Product product14 = new Product();
        product14.setProductCount(134);
        product14.setProductName("Сладкая Сказка Love is печенье сдобное");
        product14.setMadeCountry("RUSSIA");
        product14.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers14 = Set.copyOf(supplierRepository.findAll());
        product14.setSuppliers(suppliers14);
        product14.setUnit(unitRepository.findUnitById(2L));
        product14.setProductCategory(productCategoryRepository.findById(7L).get());
        product14.setArticle("75448634");
        product14.setMinMargin(BigDecimal.valueOf(10.00));
        product14.setPrice(BigDecimal.valueOf(110.00));
        product14.setStandardMargin(BigDecimal.valueOf(18.00));
        product14.setPackagingCount(4);
        product14.setIdFromErp("1000013");
        productRepository.save(product14);

        Product product15 = new Product();
        product15.setProductCount(650);
        product15.setProductName("Сладкая Сказка Печенье Подарки Деда Мороза");
        product15.setMadeCountry("RUSSIA");
        product15.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers15 = Set.copyOf(supplierRepository.findAll());
        product15.setSuppliers(suppliers15);
        product15.setUnit(unitRepository.findUnitById(2L));
        product15.setProductCategory(productCategoryRepository.findById(7L).get());
        product15.setArticle("71295343");
        product15.setMinMargin(BigDecimal.valueOf(10.00));
        product15.setPrice(BigDecimal.valueOf(600.00));
        product15.setStandardMargin(BigDecimal.valueOf(18.00));
        product15.setPackagingCount(4);
        product15.setIdFromErp("1000014");
        productRepository.save(product15);

        Product product16 = new Product();
        product16.setProductCount(250);
        product16.setProductName("I Dolci Di Montagna Савоярди печенье сахарное для тирамису");
        product16.setMadeCountry("RUSSIA");
        product16.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers16 = Set.copyOf(supplierRepository.findAll());
        product16.setSuppliers(suppliers16);
        product16.setUnit(unitRepository.findUnitById(2L));
        product16.setProductCategory(productCategoryRepository.findById(7L).get());
        product16.setArticle("06616077");
        product16.setMinMargin(BigDecimal.valueOf(10.00));
        product16.setPrice(BigDecimal.valueOf(100.00));
        product16.setStandardMargin(BigDecimal.valueOf(18.00));
        product16.setPackagingCount(4);
        product16.setIdFromErp("1000015");
        productRepository.save(product16);

        Product product17 = new Product();
        product17.setProductCount(350);
        product17.setProductName("Зефир Москва");
        product17.setMadeCountry("RUSSIA");
        product17.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers17 = Set.copyOf(supplierRepository.findAll());
        product17.setSuppliers(suppliers17);
        product17.setUnit(unitRepository.findUnitById(2L));
        product17.setProductCategory(productCategoryRepository.findById(8L).get());
        product17.setArticle("02309140");
        product17.setMinMargin(BigDecimal.valueOf(10.00));
        product17.setPrice(BigDecimal.valueOf(200.00));
        product17.setStandardMargin(BigDecimal.valueOf(18.00));
        product17.setPackagingCount(4);
        product17.setIdFromErp("1000016");
        productRepository.save(product17);

        Product product18 = new Product();
        product18.setProductCount(1350);
        product18.setProductName("Пастила Питер");
        product18.setMadeCountry("RUSSIA");
        product18.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers18 = Set.copyOf(supplierRepository.findAll());
        product18.setSuppliers(suppliers18);
        product18.setUnit(unitRepository.findUnitById(2L));
        product18.setProductCategory(productCategoryRepository.findById(8L).get());
        product18.setArticle("94704139");
        product18.setMinMargin(BigDecimal.valueOf(10.00));
        product18.setPrice(BigDecimal.valueOf(1200.00));
        product18.setStandardMargin(BigDecimal.valueOf(18.00));
        product18.setPackagingCount(4);
        product18.setIdFromErp("1000017");
        productRepository.save(product18);


        Product product19 = new Product();
        product19.setProductCount(540);
        product19.setProductName("Рамп Стейк из мраморной говядины Black Angus Мираторг");
        product19.setMadeCountry("RUSSIA");
        product19.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers19 = Set.copyOf(supplierRepository.findAll());
        product19.setSuppliers(suppliers19);
        product19.setUnit(unitRepository.findUnitById(2L));
        product19.setProductCategory(productCategoryRepository.findById(10L).get());
        product19.setArticle("37643743");
        product19.setMinMargin(BigDecimal.valueOf(10.00));
        product19.setPrice(BigDecimal.valueOf(320.00));
        product19.setStandardMargin(BigDecimal.valueOf(18.00));
        product19.setPackagingCount(4);
        product19.setIdFromErp("1000018");
        productRepository.save(product19);

        Product product20 = new Product();
        product20.setProductCount(789);
        product20.setProductName("Мякоть бедра говяжья Мираторг Black Angus");
        product20.setMadeCountry("RUSSIA");
        product20.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers20 = Set.copyOf(supplierRepository.findAll());
        product20.setSuppliers(suppliers20);
        product20.setUnit(unitRepository.findUnitById(2L));
        product20.setProductCategory(productCategoryRepository.findById(10L).get());
        product20.setArticle("69154177");
        product20.setMinMargin(BigDecimal.valueOf(10.00));
        product20.setPrice(BigDecimal.valueOf(654.00));
        product20.setStandardMargin(BigDecimal.valueOf(18.00));
        product20.setPackagingCount(4);
        product20.setIdFromErp("1000019");
        productRepository.save(product20);

        Product product21 = new Product();
        product21.setProductCount(160);
        product21.setProductName("Фарш свежий Черкизово Домашний, свинина, говядина, охлажденный");
        product21.setMadeCountry("RUSSIA");
        product21.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers21 = Set.copyOf(supplierRepository.findAll());
        product21.setSuppliers(suppliers21);
        product21.setUnit(unitRepository.findUnitById(2L));
        product21.setProductCategory(productCategoryRepository.findById(10L).get());
        product21.setArticle("57065457");
        product21.setMinMargin(BigDecimal.valueOf(10.00));
        product21.setPrice(BigDecimal.valueOf(110.00));
        product21.setStandardMargin(BigDecimal.valueOf(18.00));
        product21.setPackagingCount(4);
        product21.setIdFromErp("1000020");
        productRepository.save(product21);

        Product product22 = new Product();
        product22.setProductCount(190);
        product22.setProductName("Фарш свежий  свинина, охлажденный");
        product22.setMadeCountry("RUSSIA");
        product22.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers22 = Set.copyOf(supplierRepository.findAll());
        product22.setSuppliers(suppliers22);
        product22.setUnit(unitRepository.findUnitById(2L));
        product22.setProductCategory(productCategoryRepository.findById(11L).get());
        product22.setArticle("37521101");
        product22.setMinMargin(BigDecimal.valueOf(10.00));
        product22.setPrice(BigDecimal.valueOf(167.00));
        product22.setStandardMargin(BigDecimal.valueOf(18.00));
        product22.setPackagingCount(4);
        product22.setIdFromErp("1000021");
        productRepository.save(product22);

        Product product23 = new Product();
        product23.setProductCount(250);
        product23.setProductName("Свинина свежая Черкизово Эскалоп");
        product23.setMadeCountry("RUSSIA");
        product23.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers23 = Set.copyOf(supplierRepository.findAll());
        product23.setSuppliers(suppliers23);
        product23.setUnit(unitRepository.findUnitById(2L));
        product23.setProductCategory(productCategoryRepository.findById(11L).get());
        product23.setArticle("00965117");
        product23.setMinMargin(BigDecimal.valueOf(10.00));
        product23.setPrice(BigDecimal.valueOf(210.00));
        product23.setStandardMargin(BigDecimal.valueOf(18.00));
        product23.setPackagingCount(4);
        product23.setIdFromErp("1000022");
        productRepository.save(product23);

        Product product24 = new Product();
        product24.setProductCount(333);
        product24.setProductName("Ребрышки Мираторг Деликатесные, свиные");
        product24.setMadeCountry("RUSSIA");
        product24.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers24 = Set.copyOf(supplierRepository.findAll());
        product24.setSuppliers(suppliers24);
        product24.setUnit(unitRepository.findUnitById(2L));
        product24.setProductCategory(productCategoryRepository.findById(11L).get());
        product24.setArticle("96036982");
        product24.setMinMargin(BigDecimal.valueOf(10.00));
        product24.setPrice(BigDecimal.valueOf(280.00));
        product24.setStandardMargin(BigDecimal.valueOf(18.00));
        product24.setPackagingCount(4);
        product24.setIdFromErp("1000023");
        productRepository.save(product24);

        Product product25 = new Product();
        product25.setProductCount(899);
        product25.setProductName("Мясо охлажденное Лучезар Окорок из ягненка");
        product25.setMadeCountry("RUSSIA");
        product25.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers25 = Set.copyOf(supplierRepository.findAll());
        product25.setSuppliers(suppliers25);
        product25.setUnit(unitRepository.findUnitById(1L));
        product25.setProductCategory(productCategoryRepository.findById(12L).get());
        product25.setArticle("15690350");
        product25.setMinMargin(BigDecimal.valueOf(10.00));
        product25.setPrice(BigDecimal.valueOf(650.00));
        product25.setStandardMargin(BigDecimal.valueOf(18.00));
        product25.setPackagingCount(4);
        product25.setIdFromErp("1000024");
        productRepository.save(product25);

        Product product26 = new Product();
        product26.setProductCount(914);
        product26.setProductName("Мясо охлажденное Meat Craft Котлета из молодого барашка на кости");
        product26.setMadeCountry("RUSSIA");
        product26.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers26 = Set.copyOf(supplierRepository.findAll());
        product26.setSuppliers(suppliers26);
        product26.setUnit(unitRepository.findUnitById(1L));
        product26.setProductCategory(productCategoryRepository.findById(12L).get());
        product26.setArticle("54228708");
        product26.setMinMargin(BigDecimal.valueOf(10.00));
        product26.setPrice(BigDecimal.valueOf(710.00));
        product26.setStandardMargin(BigDecimal.valueOf(18.00));
        product26.setPackagingCount(4);
        product26.setIdFromErp("1000025");
        productRepository.save(product26);

        Product product27 = new Product();
        product27.setProductCount(150);
        product27.setProductName("Огурцы");
        product27.setMadeCountry("RUSSIA");
        product27.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers27 = Set.copyOf(supplierRepository.findAll());
        product27.setSuppliers(suppliers27);
        product27.setUnit(unitRepository.findUnitById(1L));
        product27.setProductCategory(productCategoryRepository.findById(14L).get());
        product27.setArticle("08369817");
        product27.setMinMargin(BigDecimal.valueOf(10.00));
        product27.setPrice(BigDecimal.valueOf(115.00));
        product27.setStandardMargin(BigDecimal.valueOf(18.00));
        product27.setPackagingCount(4);
        product27.setIdFromErp("1000026");
        productRepository.save(product27);

        Product product28 = new Product();
        product28.setProductCount(170);
        product28.setProductName("Помидоры");
        product28.setMadeCountry("RUSSIA");
        product28.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers28 = Set.copyOf(supplierRepository.findAll());
        product28.setSuppliers(suppliers28);
        product28.setUnit(unitRepository.findUnitById(1L));
        product28.setProductCategory(productCategoryRepository.findById(14L).get());
        product28.setArticle("63930434");
        product28.setMinMargin(BigDecimal.valueOf(10.00));
        product28.setPrice(BigDecimal.valueOf(133.00));
        product28.setStandardMargin(BigDecimal.valueOf(18.00));
        product28.setPackagingCount(4);
        product28.setIdFromErp("1000027");
        productRepository.save(product28);

        Product product29 = new Product();
        product29.setProductCount(140);
        product29.setProductName("Редиска");
        product29.setMadeCountry("RUSSIA");
        product29.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers29 = Set.copyOf(supplierRepository.findAll());
        product29.setSuppliers(suppliers29);
        product29.setUnit(unitRepository.findUnitById(1L));
        product29.setProductCategory(productCategoryRepository.findById(14L).get());
        product29.setArticle("73866646");
        product29.setMinMargin(BigDecimal.valueOf(10.00));
        product29.setPrice(BigDecimal.valueOf(110.00));
        product29.setStandardMargin(BigDecimal.valueOf(18.00));
        product29.setPackagingCount(4);
        product29.setIdFromErp("1000028");
        productRepository.save(product29);

        Product product30 = new Product();
        product30.setProductCount(67);
        product30.setProductName("Бананы");
        product30.setMadeCountry("RUSSIA");
        product30.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers30 = Set.copyOf(supplierRepository.findAll());
        product30.setSuppliers(suppliers30);
        product30.setUnit(unitRepository.findUnitById(1L));
        product30.setProductCategory(productCategoryRepository.findById(15L).get());
        product30.setArticle("24099679");
        product30.setMinMargin(BigDecimal.valueOf(10.00));
        product30.setPrice(BigDecimal.valueOf(20.00));
        product30.setStandardMargin(BigDecimal.valueOf(18.00));
        product30.setPackagingCount(4);
        product30.setIdFromErp("1000029");
        productRepository.save(product30);

        Product product31 = new Product();
        product31.setProductCount(120);
        product31.setProductName("Киви");
        product31.setMadeCountry("RUSSIA");
        product31.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers31 = Set.copyOf(supplierRepository.findAll());
        product31.setSuppliers(suppliers31);
        product31.setUnit(unitRepository.findUnitById(1L));
        product31.setProductCategory(productCategoryRepository.findById(15L).get());
        product31.setArticle("54670624");
        product31.setMinMargin(BigDecimal.valueOf(10.00));
        product31.setPrice(BigDecimal.valueOf(100.00));
        product31.setStandardMargin(BigDecimal.valueOf(18.00));
        product31.setPackagingCount(4);
        product31.setIdFromErp("1000030");
        productRepository.save(product31);

        Product product32 = new Product();
        product32.setProductCount(79);
        product32.setProductName("Манго");
        product32.setMadeCountry("RUSSIA");
        product32.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers32 = Set.copyOf(supplierRepository.findAll());
        product32.setSuppliers(suppliers32);
        product32.setUnit(unitRepository.findUnitById(2L));
        product32.setProductCategory(productCategoryRepository.findById(15L).get());
        product32.setArticle("05753823");
        product32.setMinMargin(BigDecimal.valueOf(10.00));
        product32.setPrice(BigDecimal.valueOf(65.00));
        product32.setStandardMargin(BigDecimal.valueOf(18.00));
        product32.setPackagingCount(4);
        product32.setIdFromErp("1000031");
        productRepository.save(product32);

        Product product33 = new Product();
        product33.setProductCount(55);
        product33.setProductName("Петрушка");
        product33.setMadeCountry("RUSSIA");
        product33.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers33 = Set.copyOf(supplierRepository.findAll());
        product33.setSuppliers(suppliers33);
        product33.setUnit(unitRepository.findUnitById(2L));
        product33.setProductCategory(productCategoryRepository.findById(16L).get());
        product33.setArticle("55416158");
        product33.setMinMargin(BigDecimal.valueOf(10.00));
        product33.setPrice(BigDecimal.valueOf(35.00));
        product33.setStandardMargin(BigDecimal.valueOf(18.00));
        product33.setPackagingCount(4);
        product33.setIdFromErp("1000032");
        productRepository.save(product33);

        Product product34 = new Product();
        product34.setProductCount(30);
        product34.setProductName("Укроп");
        product34.setMadeCountry("RUSSIA");
        product34.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers34 = Set.copyOf(supplierRepository.findAll());
        product34.setSuppliers(suppliers34);
        product34.setUnit(unitRepository.findUnitById(2L));
        product34.setProductCategory(productCategoryRepository.findById(16L).get());
        product34.setArticle("26887090");
        product34.setMinMargin(BigDecimal.valueOf(10.00));
        product34.setPrice(BigDecimal.valueOf(21.00));
        product34.setStandardMargin(BigDecimal.valueOf(18.00));
        product34.setPackagingCount(4);
        product34.setIdFromErp("1000033");
        productRepository.save(product34);

        Product product35 = new Product();
        product35.setProductCount(89);
        product35.setProductName("Салат");
        product35.setMadeCountry("RUSSIA");
        product35.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers35 = Set.copyOf(supplierRepository.findAll());
        product35.setSuppliers(suppliers35);
        product35.setUnit(unitRepository.findUnitById(2L));
        product35.setProductCategory(productCategoryRepository.findById(16L).get());
        product35.setArticle("56886317");
        product35.setMinMargin(BigDecimal.valueOf(10.00));
        product35.setPrice(BigDecimal.valueOf(67.00));
        product35.setStandardMargin(BigDecimal.valueOf(18.00));
        product35.setPackagingCount(4);
        product35.setIdFromErp("1000034");
        productRepository.save(product35);

        Product product36 = new Product();
        product36.setProductCount(150);
        product36.setProductName("Колбаса Егорьевская колбасно-гастрономическая фабрика");
        product36.setMadeCountry("RUSSIA");
        product36.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers36 = Set.copyOf(supplierRepository.findAll());
        product36.setSuppliers(suppliers36);
        product36.setUnit(unitRepository.findUnitById(2L));
        product36.setProductCategory(productCategoryRepository.findById(18L).get());
        product36.setArticle("31306570");
        product36.setMinMargin(BigDecimal.valueOf(10.00));
        product36.setPrice(BigDecimal.valueOf(134.00));
        product36.setStandardMargin(BigDecimal.valueOf(18.00));
        product36.setPackagingCount(4);
        product36.setIdFromErp("1000035");
        productRepository.save(product36);

        Product product37 = new Product();
        product37.setProductCount(222);
        product37.setProductName("Велком Докторская колбаса");
        product37.setMadeCountry("RUSSIA");
        product37.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers37 = Set.copyOf(supplierRepository.findAll());
        product37.setSuppliers(suppliers37);
        product37.setUnit(unitRepository.findUnitById(2L));
        product37.setProductCategory(productCategoryRepository.findById(18L).get());
        product37.setArticle("01829159");
        product37.setMinMargin(BigDecimal.valueOf(10.00));
        product37.setPrice(BigDecimal.valueOf(178.00));
        product37.setStandardMargin(BigDecimal.valueOf(18.00));
        product37.setPackagingCount(4);
        product37.setIdFromErp("1000036");
        productRepository.save(product37);

        Product product38 = new Product();
        product38.setProductCount(119);
        product38.setProductName("Колбаса Черкизово Премиум \"Сальчичон\"");
        product38.setMadeCountry("RUSSIA");
        product38.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers38 = Set.copyOf(supplierRepository.findAll());
        product38.setSuppliers(suppliers38);
        product38.setUnit(unitRepository.findUnitById(2L));
        product38.setProductCategory(productCategoryRepository.findById(18L).get());
        product38.setArticle("75810082");
        product38.setMinMargin(BigDecimal.valueOf(10.00));
        product38.setPrice(BigDecimal.valueOf(88.00));
        product38.setStandardMargin(BigDecimal.valueOf(18.00));
        product38.setPackagingCount(4);
        product38.setIdFromErp("1000037");
        productRepository.save(product38);

        Product product39 = new Product();
        product39.setProductCount(159);
        product39.setProductName("Дымов Бекон Венгерский сырокопченый, нарезка");
        product39.setMadeCountry("RUSSIA");
        product39.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers39 = Set.copyOf(supplierRepository.findAll());
        product39.setSuppliers(suppliers39);
        product39.setUnit(unitRepository.findUnitById(2L));
        product39.setProductCategory(productCategoryRepository.findById(19L).get());
        product39.setArticle("48297546");
        product39.setMinMargin(BigDecimal.valueOf(10.00));
        product39.setPrice(BigDecimal.valueOf(98.00));
        product39.setStandardMargin(BigDecimal.valueOf(18.00));
        product39.setPackagingCount(4);
        product39.setIdFromErp("1000038");
        productRepository.save(product39);

        Product product40 = new Product();
        product40.setProductCount(159);
        product40.setProductName("Дымов Бекон Венгерский сырокопченый, нарезка");
        product40.setMadeCountry("RUSSIA");
        product40.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers40 = Set.copyOf(supplierRepository.findAll());
        product40.setSuppliers(suppliers40);
        product40.setUnit(unitRepository.findUnitById(2L));
        product40.setProductCategory(productCategoryRepository.findById(19L).get());
        product40.setArticle("94921835");
        product40.setMinMargin(BigDecimal.valueOf(10.00));
        product40.setPrice(BigDecimal.valueOf(98.00));
        product40.setStandardMargin(BigDecimal.valueOf(18.00));
        product40.setPackagingCount(4);
        product40.setIdFromErp("1000039");
        productRepository.save(product40);

        Product product41 = new Product();
        product41.setProductCount(209);
        product41.setProductName("Дымов Бекон Мраморный копченовареный");
        product41.setMadeCountry("RUSSIA");
        product41.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers41 = Set.copyOf(supplierRepository.findAll());
        product41.setSuppliers(suppliers41);
        product41.setUnit(unitRepository.findUnitById(2L));
        product41.setProductCategory(productCategoryRepository.findById(19L).get());
        product41.setArticle("92989757");
        product41.setMinMargin(BigDecimal.valueOf(10.00));
        product41.setPrice(BigDecimal.valueOf(120.00));
        product41.setStandardMargin(BigDecimal.valueOf(18.00));
        product41.setPackagingCount(4);
        product41.setIdFromErp("1000040");
        productRepository.save(product41);

        Product product42 = new Product();
        product42.setProductCount(379);
        product42.setProductName("Велком Карбонад копчено-вареный");
        product42.setMadeCountry("RUSSIA");
        product42.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers42 = Set.copyOf(supplierRepository.findAll());
        product42.setSuppliers(suppliers42);
        product42.setUnit(unitRepository.findUnitById(2L));
        product42.setProductCategory(productCategoryRepository.findById(20L).get());
        product42.setArticle("90826718");
        product42.setMinMargin(BigDecimal.valueOf(10.00));
        product42.setPrice(BigDecimal.valueOf(321.00));
        product42.setStandardMargin(BigDecimal.valueOf(18.00));
        product42.setPackagingCount(4);
        product42.setIdFromErp("1000041");
        productRepository.save(product42);

        Product product43 = new Product();
        product43.setProductCount(354);
        product43.setProductName("Карбонад Мясной Дом Бородина");
        product43.setMadeCountry("RUSSIA");
        product43.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers43 = Set.copyOf(supplierRepository.findAll());
        product43.setSuppliers(suppliers43);
        product43.setUnit(unitRepository.findUnitById(2L));
        product43.setProductCategory(productCategoryRepository.findById(20L).get());
        product43.setArticle("47698336");
        product43.setMinMargin(BigDecimal.valueOf(10.00));
        product43.setPrice(BigDecimal.valueOf(311.00));
        product43.setStandardMargin(BigDecimal.valueOf(18.00));
        product43.setPackagingCount(4);
        product43.setIdFromErp("1000042");
        productRepository.save(product43);

        Product product44 = new Product();
        product44.setProductCount(569);
        product44.setProductName("Карбонад Alto Concetto сыровяленый");
        product44.setMadeCountry("RUSSIA");
        product44.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers44 = Set.copyOf(supplierRepository.findAll());
        product44.setSuppliers(suppliers44);
        product44.setUnit(unitRepository.findUnitById(2L));
        product44.setProductCategory(productCategoryRepository.findById(20L).get());
        product44.setArticle("18481169");
        product44.setMinMargin(BigDecimal.valueOf(10.00));
        product44.setPrice(BigDecimal.valueOf(511.00));
        product44.setStandardMargin(BigDecimal.valueOf(18.00));
        product44.setPackagingCount(4);
        product44.setIdFromErp("1000043");
        productRepository.save(product44);

        Product product45 = new Product();
        product45.setProductCount(225);
        product45.setProductName("Зефир КФ Нева Doni Zefironi ассорти");
        product45.setMadeCountry("RUSSIA");
        product45.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers45 = Set.copyOf(supplierRepository.findAll());
        product45.setSuppliers(suppliers45);
        product45.setUnit(unitRepository.findUnitById(2L));
        product45.setProductCategory(productCategoryRepository.findById(8L).get());
        product45.setArticle("63206915");
        product45.setMinMargin(BigDecimal.valueOf(10.00));
        product45.setPrice(BigDecimal.valueOf(189.00));
        product45.setStandardMargin(BigDecimal.valueOf(18.00));
        product45.setPackagingCount(4);
        product45.setIdFromErp("1000044");
        productRepository.save(product45);

        Product product46 = new Product();
        product46.setProductCount(77);
        product46.setProductName("Суфле-маршмеллоу Haribo Chamallows Minis");
        product46.setMadeCountry("RUSSIA");
        product46.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers46 = Set.copyOf(supplierRepository.findAll());
        product46.setSuppliers(suppliers46);
        product46.setUnit(unitRepository.findUnitById(2L));
        product46.setProductCategory(productCategoryRepository.findById(8L).get());
        product46.setArticle("39800036");
        product46.setMinMargin(BigDecimal.valueOf(10.00));
        product46.setPrice(BigDecimal.valueOf(55.00));
        product46.setStandardMargin(BigDecimal.valueOf(18.00));
        product46.setPackagingCount(4);
        product46.setIdFromErp("1000045");
        productRepository.save(product46);

        Product product47 = new Product();
        product47.setProductCount(67);
        product47.setProductName("Суфле-маршмеллоу Haribo Chamallows Minis");
        product47.setMadeCountry("RUSSIA");
        product47.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers47 = Set.copyOf(supplierRepository.findAll());
        product47.setSuppliers(suppliers47);
        product47.setUnit(unitRepository.findUnitById(2L));
        product47.setProductCategory(productCategoryRepository.findById(8L).get());
        product47.setArticle("68654270");
        product47.setMinMargin(BigDecimal.valueOf(10.00));
        product47.setPrice(BigDecimal.valueOf(45.00));
        product47.setStandardMargin(BigDecimal.valueOf(18.00));
        product47.setPackagingCount(4);
        product47.setIdFromErp("1000046");
        productRepository.save(product47);

        Product product48 = new Product();
        product48.setProductCount(222);
        product48.setProductName("Зефир со вкусом апельсина на печенье глазированный ");
        product48.setMadeCountry("RUSSIA");
        product48.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers48 = Set.copyOf(supplierRepository.findAll());
        product48.setSuppliers(suppliers48);
        product48.setUnit(unitRepository.findUnitById(2L));
        product48.setProductCategory(productCategoryRepository.findById(8L).get());
        product48.setArticle("84148633");
        product48.setMinMargin(BigDecimal.valueOf(10.00));
        product48.setPrice(BigDecimal.valueOf(155.00));
        product48.setStandardMargin(BigDecimal.valueOf(18.00));
        product48.setPackagingCount(4);
        product48.setIdFromErp("1000047");
        productRepository.save(product48);

        Product product49 = new Product();
        product49.setProductCount(130);
        product49.setProductName("Апельсины");
        product49.setMadeCountry("RUSSIA");
        product49.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers49 = Set.copyOf(supplierRepository.findAll());
        product49.setSuppliers(suppliers49);
        product49.setUnit(unitRepository.findUnitById(2L));
        product49.setProductCategory(productCategoryRepository.findById(15L).get());
        product49.setArticle("69880317");
        product49.setMinMargin(BigDecimal.valueOf(10.00));
        product49.setPrice(BigDecimal.valueOf(45.00));
        product49.setStandardMargin(BigDecimal.valueOf(18.00));
        product49.setPackagingCount(4);
        product49.setIdFromErp("1000048");
        productRepository.save(product49);

        Product product50 = new Product();
        product50.setProductCount(170);
        product50.setProductName("Мандарины");
        product50.setMadeCountry("RUSSIA");
        product50.setManufacturer(manufacturerRepository.findManufacturerById(2L));
        Set<Supplier> suppliers50 = Set.copyOf(supplierRepository.findAll());
        product50.setSuppliers(suppliers50);
        product50.setUnit(unitRepository.findUnitById(2L));
        product50.setProductCategory(productCategoryRepository.findById(15L).get());
        product50.setArticle("97628650");
        product50.setMinMargin(BigDecimal.valueOf(10.00));
        product50.setPrice(BigDecimal.valueOf(58.00));
        product50.setStandardMargin(BigDecimal.valueOf(18.00));
        product50.setPackagingCount(4);
        product50.setIdFromErp("1000049");
        productRepository.save(product50);
    }
}
